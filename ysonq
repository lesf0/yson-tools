#!/bin/bash

set -euo pipefail

JQ_ARGS=()

YSON_OUTPUT_ARGS=""

while [[ $# -gt 0 ]]; do
	case $1 in
		-n|--null-input)
			NULL_INPUT=1
			shift # past argument
			;;
		-R|--raw-input)
			RAW_INPUT=1
			JQ_ARGS+=("$1") # save positional arg
			shift # past argument
			;;
		-c|--compact-output)
			YSON_OUTPUT_ARGS+=" -f compact"
			shift # past argument
			;;
		-f|--from-file|-L)
			JQ_ARGS+=("$1") # save positional arg
			JQ_ARGS+=("$2") # save value
			shift # past argument
			shift # past value
			;;
		--arg|--argjson|--slurpfile|--rawfile)
			JQ_ARGS+=("$1") # save positional arg
			JQ_ARGS+=("$2") # save name
			JQ_ARGS+=("$3") # save value
			shift # past argument
			shift # past name
			shift # past value
			;;
		-a|--ascii-output|-C|--color-output|-M|--monochrome-output|--tab|--indent|--unbuffered|--stream|--stream-errors|--seq|-V|--version|--build-configuration|-h|--help)
			echo "ysonq: $1 is not supported (yet)"
			exit 1
			;;
		--argyson)
			JQ_ARGS+=("--argjson") # save positional arg
			JQ_ARGS+=("$2") # save name
			JQ_ARGS+=("$(echo "$3" | yson-convert -m y2j -f compact)") # save value
			shift # past argument
			shift # past name
			shift # past value
			;;
		--ysonargs)
			HAS_YSONARGS=1
			JQ_ARGS+=("--jsonargs") # save positional arg
			shift # past argument
			;;
		--*args)
			HAS_ARGS=1
			JQ_ARGS+=("$1") # save positional arg
			shift # past argument
			;;
		--)
			break
			;;
		-*)
			JQ_ARGS+=("$1") # save positional arg
			shift # past argument
			;;
		*)
			if [ ! -z ${FILTER+x} ]; then
				break; # we've found 
			else
				FILTER=1
				JQ_ARGS+=("$1") # save positional arg
				shift # past argument
			fi
			;;
	esac
done

if [ ! -z ${HAS_YSONARGS+x} ]; then
	if [ ! -z ${HAS_ARGS+x} ]; then
		echo "ysonq: cannot have jq args and ysonq args at the same time"
		exit 1
	fi

	while [[ $# -gt 0 ]]; do
		if [[ "$1" == "--" ]] ; then
			JQ_ARGS+=("$1")
			shift
			continue
		fi

		JQ_ARGS+=("$(yson-convert -m y2j -f compact "$1")")
		shift
	done
fi

if [ -z ${NULL_INPUT+x} ] && [ -z ${RAW_INPUT+x} ]; then
	if [ -t 0 ]; then
		echo "ysonq: expected input from stdinn"
		exit 1
	fi

	# handle binary data
	INPUT="$(base64 -w 0)"

	if [ -z "$(echo $INPUT | base64 -d | tr -d '[:space:]\0')" ] ; then
		echo "ysonq: empty stdin"
		exit 1
	fi

	JSON_SRC="$(echo "$INPUT" |\
		base64 -d |\
		yson-convert -seq -m y2j -f compact)"
elif [ -z ${NULL_INPUT+x} ]; then
	JSON_SRC="$(cat)"
else
	JSON_SRC="null"
fi

JSON="$(echo "$JSON_SRC" |\
		jq -c "${JQ_ARGS[@]}" "$@")"

if ! jq -reM '""' >/dev/null 2>&1 <<<"$JSON"; then
	# jq produced something which is not JSON, so let's just roll with it
	echo "$JSON"
	exit 0
fi

case "$(echo "$JSON" | grep . | wc -l)" in
	0)
		# empty output
		exit 0
		;;
	1)
		# single JSON, just continue
		;;
	*)
		# let's try to read this as a sequence of JSON's
		YSON_OUTPUT_ARGS+=" -seq"
		;;
esac

echo "$JSON" |\
jq -c 'walk(
	if type == "object"
	then with_entries(
		if .key == "Attrs" then .key = "$attributes"
		elif .key == "Value" then .key = "$value"
		else . end
	) else . end
)' |\
yson-convert -m j2y $YSON_OUTPUT_ARGS
